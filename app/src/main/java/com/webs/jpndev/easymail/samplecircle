machine:
  java:
    # latest wiremock version needs java 8
    version: oraclejdk8
  environment:
    GRADLE_OPTS: -Xmx512m
    COVERALLS_REPO_TOKEN: mHJjy4h8zt9RIIBKg8sBosF5JkKsFk139

test:
  pre:
  # emulator startup need some minutes that's why start it before first build/test steps for build speed up
    - emulator -avd circleci-android22 -no-audio -no-window:
        background: true
        parallel: true

  override:
    # Build the code
    - ./gradlew app:assembleDebug

    # Execute Unit Tests
    - ./gradlew app:test

    # start wiremock to support tests with network communication
    - tools/src/main/resources/start-wiremock.sh:
          # start at background to use wiremock in next build steps
          background: true

    # Execute Component Tests
    - ./gradlew appCt:test

    # Check lint hints
    - ./gradlew app:lint

    # Build instrumented test code
    # fix apk not build https://code.google.com/p/android/issues/detail?id=180689
    - ./gradlew appIt:assembleDebug

    # ensure that the emulator is ready to use
    - circle-android wait-for-boot
    # the necessary sleep duration may change with time and depends on the pre tasks length.
    # When all pre tasks are run long enough then waiting will not be necessary anymore.
    # This sleep should avoid the com.android.builder.testing.api.DeviceException: com.android.ddmlib.ShellCommandUnresponsiveException
    - sleep 60
    # at least remove the look screen
    - adb shell input keyevent 82

    # execute tests on emulator
    - ./gradlew appIt:connectedCheck

    # Create coverage report
    - ./gradlew jacocoTestReport

    # copy test results
    - mv app/build/reports/tests/debug $CIRCLE_TEST_REPORTS/AppUnitTests
    - mv appCt/build/test-report $CIRCLE_TEST_REPORTS/ComponentTests
    - mv appIt/build/reports/androidTests/connected $CIRCLE_TEST_REPORTS/AndroidTests
    - mv build/reports/jacoco/test/html $CIRCLE_TEST_REPORTS/CodeCoverageReport

    # copy lint report
    - mkdir $CIRCLE_TEST_REPORTS/Lint
    - mv app/build/outputs/lint-results_files $CIRCLE_TEST_REPORTS/Lint
    - mv app/build/outputs/lint-results.html $CIRCLE_TEST_REPORTS/Lint/lint-app-results.html

    # try circleCi proper test value feature
    - mkdir $CIRCLE_TEST_REPORTS/junit
    - find */build/test-results -name "*.xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;

# Only executed if all tasks are successful
deployment:

  # report coverage to coveralls
  coverage:
    branch: [master, rewrite]
    commands:
    - ./gradlew coveralls





    <<<<<<<<<<<<<nextttttttttttt>>>>>>>>>>>>>>
    # Build configuration file for Circle CI
    # needs to be named `circle.yml` and should be in the top level dir of the repo

    general:
      artifacts:
       - /home/ubuntu/TestApp/app/build/outputs/apk/

    machine:
      environment:
        ANDROID_HOME: /home/ubuntu/android
      java:
        version: oraclejdk6

    dependencies:
      cache_directories:
        - ~/.android
        - ~/android
      override:
        - (echo "Downloading Android SDK v19 now!")
        - (source scripts/environmentSetup.sh && getAndroidSDK)

    test:
      pre:
        - $ANDROID_HOME/tools/emulator -avd testAVD -no-skin -no-audio -no-window:
              background: true
              parallel: true
        # run tests  against the emulator.
        - ./gradlew assembleDebug
          timeout: 1200
        # run tests
        - ./gradlew assembleDebugTest
          timeout: 1200
         # run script
        - source scripts/environmentSetup.sh && waitForAVD
      override:
        - echo "Running JUnit tests!"
        - ./gradlew connectedAndroidTest


,,,,,,,,,,,,,,,,,,,,,,
ssh -p 64696 ubuntu@54.161.189.88 -L 8080:localhost:3000

ssh -p 64696 ubuntu@54.161.189.88
<<<<<<<<<<<<<<<working >>>>>>>>>>>>>>>>>>>>>>>

#

# Build configuration for Circle CI
#

general:
    artifacts:
        - /home/ubuntu/TestApp/app/build/outputs/apk/

machine:
    environment:
        ANDROID_HOME: /usr/local/android-sdk-linux
dependencies:
    override:
        - echo y | android update sdk --no-ui --all --filter tools,platform-tools,build-tools-21.1.2,android-21,extra-google-m2repository,extra-google-google_play_services,extra-android-support
        - ANDROID_HOME=/usr/local/android-sdk-linux ./gradlew dependencies
test:
  override:
    # start the emulator
    - emulator -avd circleci-android21 -no-audio -no-window:
        background: true
        parallel: true
    # wait for it to have booted
    - circle-android wait-for-boot
    # run tests  against the emulator.
    - ./gradlew connectedAndroidTest
    # copy the build outputs to artifacts
    - cp -r /home/ubuntu/TestApp/app/build/outputs $CIRCLE_ARTIFACTS
    # copy the test results to the test results directory.
    - cp -r /home/ubuntu/TestApp/app/build/outputs/androidTest-results/* $CIRCLE_TEST_REPORT





    >>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>

    general:
        artifacts:
            -  /home/ubuntu/TestApp/app/build/outputs/apk/

    machine:
      environment:
        ANDROID_HOME: /usr/local/android-sdk-linux
        GRADLE_OPTS: -Xmx512m

    dependencies:
      post:
        - echo y | android update sdk --no-ui --all --filter tools,platform-tools,build-tools-21.1.2,android-21,extra-google-m2repository,extra-google-google_play_services,extra-android-support
        -  echo n | android create avd -n testing -f -t android-18

    test:
      override:
        - $ANDROID_HOME/tools/emulator -avd testing -no-window -no-boot-anim -no-audio:
            background: true
            parallel: true
        - ./gradlew assembleDebug
           # wait for it to have booted
         -testing wait-for-boot
          # run tests  against the emulator.
          - ./gradlew connectedAndroidTest
          # copy the build outputs to artifacts
          - cp -r /home/ubuntu/TestApp/app/build/outputs $CIRCLE_ARTIFACTS
          # copy the test results to the test results directory.
          - cp -r /home/ubuntu/TestApp/app/build/outputs/androidTest-results/* $CIRCLE_TEST_REPORT



